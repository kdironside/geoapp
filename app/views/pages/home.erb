<h2> Sample App: Google Maps API and MySQL<h2>
</br>	
</br>
</br>
<h4>This sample demonstrates how to include Google Maps in a Rails app. It uses the <%=link_to "Google-Maps-for-Rails", 'https://github.com/apneadiving/Google-Maps-for-Rails' %> gem, otherwise known as "gmaps4rails".
</h4> 
</br>
<h4>This is a Rails 3.2.3 application that uses Ruby 1.9.3 and was developed on Mac Lion OS X. This app also utilizes a local MySQL database (<%=link_to 'gem "mysql2"', 'http://rubygems.org/gems/mysql2' %>) instead of the default rails development database, SQLite3. 
</h4>
</br>	
<h4>On the database side of things, if you're interested in a nice interface to view/edit/destroy data in your MySQL, PostgreSQL, or SQLite tables without navigating through the Rails console, think about trying <%=link_to "db_Explorer", 'https://github.com/robinbortlik/db_explorer' %>. This simple Rails app is set up using PostgreSQL locally and makes viewing, editing, and destroying easy.
</h4>
</br>	
<h4>Also, the ruby gem, <%=link_to "Lunchy", 'https://github.com/mperham/lunchy' %> is a great little app that makes launching PostgreSQL and MySQL a snap. So instead of, "pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start", you type, "lunchy start postgres". Other examples include, "lunchy stop mongo", "lunchy status mysql", or just "lunchy status" to see all agents. (Agents are background programs for a particular user). See the lunchy doc for a bunch of sweet options.
</h4>
</br>
<h4>Enough said, let's start adding some <%=link_to "locations", locations_path %> so we can check out how the Google Map API is working.
</h4>
